function [fitnessHistory] = OneLambdaSelfAdaptionES(yParent, sigmaParent, sigmaStop, lambda, targetFunction)  % initialization  dimensions = size(yParent, 1);    fitnessHistory = [feval(targetFunction, yParent)];  yHistory = [yParent];  sigmaHistory = [sigmaParent];    generationCount = 0;    do    % empty pools    sigmaPool = [];    yPool = [];    fitnessPool = [];        % generate lambda children    for i = 1:lambda      sigmaLambda = sigmaParent * randn(1,1);      sigmaPool = [sigmaPool ; sigmaLambda];            mutation = randn(dimensions, 1);      yLambda = yParent + mutation * sigmaLambda;      yPool = [yPool ; yLambda];            fitnessLambda = feval(targetFunction, yLambda);      fitnessPool = [fitnessPool ; fitnessLambda];    end        fitnessPool    sigmaPool    yPool        % choose best child    minFitness = min(fitnessPool)    indexBestChild = find(fitnessPool == minFitness)        % make it the new parent    sigmaParent = sigmaPool(indexBestChild)    sigmaHistory = [sigmaHistory ; sigmaParent];        yParent = yPool(indexBestChild)    yHistory = [yHistory ; yParent];        generationCount++;  until sigmaParent < sigmaStop;end