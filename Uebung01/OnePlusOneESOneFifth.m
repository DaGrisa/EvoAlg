function [fitnessHistory, fitnessParent, generationCount, sigmaHistory, yParent] = OnePlusOneESOneFifth(targetFunction, targetFunctionOptionalParameters, yParent, sigma, sigmaStop)  generationCount = 0;    optimumProbability = 1/5;  sigmaChangeFactor = 1.2;  constantSigmaGenerations = 100; % random?    dimensions = size(yParent, 1);    % TODO parameter  fitnessParent = feval(targetFunction, yParent, targetFunctionOptionalParameters);    yHistory = [];  fitnessHistory = [];  sigmaHistory = []; % Aufgabe 4    do    successfulMutations = 0;    for k=1:constantSigmaGenerations      yHistory = [yHistory ; yParent];      fitnessHistory = [fitnessHistory ; fitnessParent];      mutation = randn(dimensions, 1); % normal distributed random number      yOffspring = yParent + sigma * mutation;      fitnessOffspring = feval(targetFunction, yOffspring, targetFunctionOptionalParameters);      if fitnessOffspring < fitnessParent        yParent = yOffspring;        fitnessParent = fitnessOffspring;        successfulMutations++;      end      generationCount++;    end      successProbability = successfulMutations / constantSigmaGenerations;        sigmaHistory = [sigmaHistory ; sigma];        if(successProbability > optimumProbability)      sigma = sigma * sigmaChangeFactor;    else      sigma = sigma / sigmaChangeFactor;    end  until sigma < sigmaStop;  yHistory = [yHistory ; yParent];  fitnessHistory = [fitnessHistory ; fitnessParent];end